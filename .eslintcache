[{"E:\\react\\react-trello\\src\\index.js":"1","E:\\react\\react-trello\\src\\utils\\store.js":"2","E:\\react\\react-trello\\src\\utils\\storeApi.js":"3","E:\\react\\react-trello\\src\\components\\Input\\InputCard.js":"4","E:\\react\\react-trello\\src\\App.js":"5","E:\\react\\react-trello\\src\\components\\Input\\InputContainer.js":"6","E:\\react\\react-trello\\src\\components\\Card.js":"7","E:\\react\\react-trello\\src\\api\\Project.js":"8"},{"size":517,"mtime":1615106646850,"results":"9","hashOfConfig":"10"},{"size":487,"mtime":1615106646851,"results":"11","hashOfConfig":"10"},{"size":69,"mtime":1615106646852,"results":"12","hashOfConfig":"10"},{"size":2095,"mtime":1615106646849,"results":"13","hashOfConfig":"10"},{"size":4368,"mtime":1615273198199,"results":"14","hashOfConfig":"10"},{"size":1171,"mtime":1615106646849,"results":"15","hashOfConfig":"10"},{"size":756,"mtime":1615106646848,"results":"16","hashOfConfig":"10"},{"size":102,"mtime":1615272647472,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1vqiupi",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\react\\react-trello\\src\\index.js",[],["37","38"],"E:\\react\\react-trello\\src\\utils\\store.js",[],["39","40"],"E:\\react\\react-trello\\src\\utils\\storeApi.js",[],"E:\\react\\react-trello\\src\\components\\Input\\InputCard.js",[],"E:\\react\\react-trello\\src\\App.js",["41"],"import React, { useEffect, useState } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport List from './components/List/List';\r\nimport store from './utils/store';\r\nimport StoreApi from './utils/storeApi';\r\nimport api from './api/Project';\r\nimport InputContainer from './components/Input/InputContainer';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    minHeight: '100vh',\r\n    background: 'green',\r\n    width: '100%',\r\n    overflowY: 'auto',\r\n  },\r\n}));\r\n\r\nexport default function App() {\r\n  const [project,setProject]=useState([]);\r\n  const retrieveProject = async ()=>{\r\n    const response = await api.get(\"api/project/1\")\r\n    return response.data;\r\n  }\r\n  useEffect(()=>{\r\n    const getAllProjects = async ()=>{\r\n      const allProject =await retrieveProject();\r\n      if(allProject) setProject(allProject);\r\n    };\r\n    getAllProjects();\r\n  },[]);\r\n  console.log(project)\r\n  const [data, setData] = useState(store);\r\n  const classes = useStyle();\r\n  const addMoreCard = (title, listId) => {\r\n    console.log(title, listId);\r\n\r\n    const newCardId = uuid();\r\n    const newCard = {\r\n      id: newCardId,\r\n      title,\r\n    };\r\n\r\n    const list = data.lists[listId];\r\n    list.cards = [...list.cards, newCard];\r\n    \r\n    const newState = {\r\n      ...data,\r\n      lists: {\r\n        ...data.lists,\r\n        [listId]: list,\r\n      },\r\n    };\r\n    setData(newState);\r\n  };\r\n\r\n  const addMoreList = (title) => {\r\n    const newListId = uuid();\r\n    const newList = {\r\n      id: newListId,\r\n      title,\r\n      cards: [],\r\n    };\r\n    const newState = {\r\n      listIds: [...data.listIds, newListId],\r\n      lists: {\r\n        ...data.lists,\r\n        [newListId]: newList,\r\n      },\r\n    };\r\n    setData(newState);\r\n  };\r\n\r\n  const updateListTitle = (title, listId) => {\r\n    const list = data.lists[listId];\r\n    list.title = title;\r\n\r\n    const newState = {\r\n      ...data,\r\n      lists: {\r\n        ...data.lists,\r\n        [listId]: list,\r\n      },\r\n    };\r\n    setData(newState);\r\n  };\r\n\r\n  const onDragEnd = (result) => {\r\n    const { destination, source, draggableId, type } = result;\r\n    console.log('destination', destination, 'source', source, draggableId);\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n    if (type === 'list') {\r\n      const newListIds = data.listIds;\r\n      newListIds.splice(source.index, 1);\r\n      newListIds.splice(destination.index, 0, draggableId);\r\n      return;\r\n    }\r\n\r\n    const sourceList = data.lists[source.droppableId];\r\n    const destinationList = data.lists[destination.droppableId];\r\n    const draggingCard = sourceList.cards.filter(\r\n      (card) => card.id === draggableId\r\n    )[0];\r\n\r\n    if (source.droppableId === destination.droppableId) {\r\n      sourceList.cards.splice(source.index, 1);\r\n      destinationList.cards.splice(destination.index, 0, draggingCard);\r\n      const newSate = {\r\n        ...data,\r\n        lists: {\r\n          ...data.lists,\r\n          [sourceList.id]: destinationList,\r\n        },\r\n      };\r\n      setData(newSate);\r\n    } else {\r\n      sourceList.cards.splice(source.index, 1);\r\n      destinationList.cards.splice(destination.index, 0, draggingCard);\r\n\r\n      const newState = {\r\n        ...data,\r\n        lists: {\r\n          ...data.lists,\r\n          [sourceList.id]: sourceList,\r\n          [destinationList.id]: destinationList,\r\n        },\r\n      };\r\n      setData(newState);\r\n    }\r\n  };\r\n  return (\r\n    \r\n    <StoreApi.Provider value={{ addMoreCard, addMoreList, updateListTitle }}>\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <Droppable droppableId=\"app\" type=\"list\" direction=\"horizontal\">\r\n          {(provided) => (\r\n            <div\r\n              className={classes.root}\r\n              ref={provided.innerRef}\r\n              {...provided.droppableProps}\r\n            >\r\n              {data.listIds.map((listId, index) => {\r\n                const list = data.lists[listId];\r\n                {console.log(list)}\r\n                return <List list={list} key={listId} index={index} />;\r\n              })}\r\n              <InputContainer type=\"list\" />\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    </StoreApi.Provider>\r\n  );\r\n}","E:\\react\\react-trello\\src\\components\\Input\\InputContainer.js",[],"E:\\react\\react-trello\\src\\components\\Card.js",[],"E:\\react\\react-trello\\src\\api\\Project.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"42","replacedBy":"46"},{"ruleId":"44","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":149,"column":17,"nodeType":"50","messageId":"51","endLine":149,"endColumn":36},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],["52"],["53"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation"]